|1| Core Development
    ...
    |1.1| Tools
          |1.1.1| GIT

Objective: Develop your Git skills using github infrastructure
Proficiency Level: Medium

Make sure you have git installed:
# apt-get install git-core

Configure your name and email under Git:
$ git config --global user.name "YourName YourLastName"
$ git config --global user.email "your.email.address@wherever.com"

Understand the following steps:
 https://help.github.com/articles/fork-a-repo/
 https://help.github.com/articles/syncing-a-fork/
 https://help.github.com/articles/pushing-to-a-remote/
 https://help.github.com/articles/using-pull-requests/

So you can make a fork, sync, push and ask for a pull request of
xe1gyq/linuxlearning instead of the example octocat/Spoon-Knife:
 https://github.com/xe1gyq/linuxlearning

You are now ready to go! Remember you will be pushing your changes to
xe1gyq/linuxlearning

============================================================================

|1| Core Development
    |1.2| Programming Languages
          |1.2.1| C

Objetive: Have solid C programming skills required to be a Linux developer
Proficiency Level: Intermediate

Read "The C Programming Language" by Brian W. Kernighan and Dennis M. Ritchie

[Hands On] Write and compile your exercises in your Linux Box and add them to this
repository under your <ssid>/01.core/cXX.c, the more exercises you write the more
familiar you get with C programming language. You will be a exemplary C Developer
if you complete the last exercise of every chapter from "The C Programming
Language"

============================================================================

|1| Core Development
    |1.2| Programming Languages
          ...
          |1.2.2| Shell Scripting

Objective: Shell scripting is a basic skill every Linux developer has
Proficiency Level: Advanced

We require a script to do some "processing" for every kernel released, make it work
first then optimize it.

We need the following working directory structure

|- 01.core
  |- scriptinglearning
    |- kernelimages  (directory)
    |- preworkspace  (directory)
    |- postworksapce (directory)
    |- script.sh (our script)
    |- stats.pre (text file)
    |- stats.post (text file)
    |- intel.contributors (text file)

= Script Arguments =

The script will receive 3 arguments: the file location, version of the kernel and the file type

$ myscript.sh <internet/local> <x.x.xx> <xz|gz>

If file location is the internet then use this repository to grab the kernel tar file
 https://www.kernel.org/pub/linux/kernel/v3.x/
and download it to kernelimages directory
If file location is local then use kernelimages directory to grab the kernel tar file

= Processing =

We will gather statistics and do some work in 2 phases, right after we have decompressed the kernel file under the preworkspace directory and after we make some changes to its directory structure under postworkspace, statistics will be populated in 2 different files under our top working directory, their names will be:

    stats.pre
    stats.post

= Pre Processing =

Take kernel image from kernelimages directory and decompress under the preworkspace directory

We will require the following information under stats.pre files:

File Names

    # of READMEs
    # of Kconfig
    # of Kbuild
    # of Makefiles
    # of .c files
    # of .h files
    # of .pl files
    # of others files
    Total number of files

File Content

    # of ocurrences for Linus
    # of architectures/directories found under arch/
    # of ocurrences for kernel_start
    # of ocurrences for __init
    # of files in its filename containing the word gpio
    # of ocurrences for #include <linux/module.h>

Some Tasks To Do

    Sort in alphabetical order all #include <linux/*> under drivers/i2c/ Make sure you identify all files you have modified, you will need their identity in the post processing phase

    Let's populate our file called intel.contributors under our top level working directory directory, search for all Intel contributors matching @intel.com and identify the file where their name was located, one line per contributor and cannot repeat contributor e.g.

Path/to/file.c | Sara Sharp
Path/to/file.c | Darren Hart

= Post Processing =

Create 3 directories under postworkspace and move all files from preworkspace where kernel was decompressed according to the file extensions:

    files_c, all .c files
    files_h, all .h files
    files_others, all other files

In all 3 directories, if we have files with the same name, add a number as identifier that will increase by 1 as required

Some Tasks To Do

    Add your name to the beginning, middle and end of every .c file
    In all files substitute #include <linux/learningscripting.h> for every #include <linux/module.h> found
    Fix your #include's order for the files coming from driver/i2c

We will need the following information under stats.post files:

File Names

    # of READMEs
    # of Kconfig
    # of Kbuild
    # of Makefiles
    # of .c files
    # of .h files
    # of .pl files
    # of others files
    Total number of files

File Content

    # of ocurrences for Linus
    # of ocurrences for kernel_start
    # of ocurrences for __init
    # of files in its filename containing the word gpio
    # of ocurrences for #include <linux/module.h>
    # of ocurrences for #include <linux/learningscripting.h>

= Results =

A message of Pass / Fail should be printed to stdout for each of the following:

    Our Total number of files is the same in both stats.pre and stats.post
    Our # of ocurrences for #include <linux/module.h> and #include <linux/linuxlearning.h> is the same in both stats.pre and stats.post

============================================================================

|1| Core Development
    |1.2| Programming Languages
          ...
          |1.2.3| Python

Objective: Bring your basic skills up-to-speed
Proficiency Level: Basic

Guess what? Port the previous script to Python :) remember to change the
name of the host directory, now called, pythonlearning 

|- 01.core
  |- pythonlearning
    |- kernelimages  (directory)
       ... ...

# End of file
