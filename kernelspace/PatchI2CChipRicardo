--- ../../linlearn2/linuxlearning/kernelspace/i2c_chip.c	2015-01-06 23:35:40.169438452 -0600
+++ i2c_chip.c	2015-01-06 17:07:41.708089565 -0600
@@ -22,19 +22,12 @@
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/i2c.h>
-#include <linux/i2c-sensor.h>
-
-/* Addresses to scan */
-static unsigned short normal_i2c[] = { I2C_CLIENT_END };
-static unsigned short normal_i2c_range[] = { 0x00, 0xff, I2C_CLIENT_END };
-static unsigned int normal_isa[] = { I2C_CLIENT_ISA_END };
-static unsigned int normal_isa_range[] = { I2C_CLIENT_ISA_END };
-
-/* Insmod parameters */
-SENSORS_INSMOD_1(chip);
+#include <linux/hwmon.h>
+#include <linux/semaphore.h>
 
 /* Each client has this additional data */
 struct chip_data {
+	struct i2c_client *client;
 	struct semaphore update_lock;
 	char valid;			/* !=0 if following fields are valid */
 	unsigned long last_updated;	/* In jiffies */
@@ -43,20 +36,28 @@
 	u16 temp_hyst;
 };
 
+static struct i2c_device_id chip_idtable[] = {
+	{ "chip", 0 },
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, chip_idtable);
+
 #define REG_TEMP_HYST	0x01
 #define REG_TEMP_OS	0x02
 
-static int chip_attach_adapter(struct i2c_adapter *adapter);
-static int chip_detect(struct i2c_adapter *adapter, int address, int kind);
-static int chip_detach_client(struct i2c_client *client);
+static int chip_probe(struct i2c_client *client, const struct i2c_device_id *id);
+static int chip_remove(struct i2c_client *client);
 
 /* This is the driver that will be inserted */
 static struct i2c_driver chip_driver = {
-	.owner		= THIS_MODULE,
-	.name		= "tiny_chip",
-	.flags		= I2C_DF_NOTIFY,
-	.attach_adapter	= chip_attach_adapter,
-	.detach_client	= chip_detach_client,
+	.driver = {
+		.owner		= THIS_MODULE,
+		.name		= "tiny_chip",
+	},
+	.id_table = chip_idtable,
+	.probe = chip_probe,
+	.remove	= chip_remove,
 };
 
 
@@ -75,7 +76,7 @@
 }
 
 #define show(value)	\
-static ssize_t show_##value(struct device *dev, char *buf)	\
+static ssize_t show_##value(struct device *dev, struct device_attribute * attr, char *buf)	\
 {								\
 	struct i2c_client *client = to_i2c_client(dev);		\
 	struct chip_data *data = i2c_get_clientdata(client);	\
@@ -88,7 +89,7 @@
 show(temp_input);
 
 #define set(value, reg)	\
-static ssize_t set_##value(struct device *dev, const char *buf, size_t count)	\
+static ssize_t set_##value(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)	\
 {								\
 	struct i2c_client *client = to_i2c_client(dev);		\
 	struct chip_data *data = i2c_get_clientdata(client);	\
@@ -106,76 +107,46 @@
 static DEVICE_ATTR(temp_min, S_IWUSR | S_IRUGO, show_temp_hyst, set_temp_hyst);
 static DEVICE_ATTR(temp_input, S_IRUGO, show_temp_input, NULL);
 
-static int chip_attach_adapter(struct i2c_adapter *adapter)
+/* This function is called by the driver's probe method */
+static int chip_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-	return i2c_detect(adapter, &addr_data, chip_detect);
-}
-
-/* This function is called by i2c_detect */
-static int chip_detect(struct i2c_adapter *adapter, int address, int kind)
-{
-	struct i2c_client *new_client = NULL;
 	struct chip_data *data = NULL;
 	int err = 0;
 
-	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA))
-		goto error;
-
-	new_client = kmalloc(sizeof(*new_client), GFP_KERNEL);
-	if (!new_client) {
-		err = -ENOMEM;
-		goto error;
-	}
 	data = kmalloc(sizeof(*data), GFP_KERNEL);
 	if (!data) {
 		err = -ENOMEM;
 		goto error;
 	}
 			
-	memset(new_client, 0x00, sizeof(*new_client));
 	memset(data, 0x00, sizeof(*data));
+	
+	data->client = client;
+	i2c_set_clientdata(client, data);
 
-	i2c_set_clientdata(new_client, data);
-	new_client->addr = address;
-	new_client->adapter = adapter;
-	new_client->driver = &chip_driver;
-	new_client->flags = 0;
-
-	/* Fill in the remaining client fields */
-	strncpy(new_client->name, "tiny_chip", I2C_NAME_SIZE);
 	data->valid = 0;
+	#ifndef init_MUTEX
+	sema_init(&data->update_lock,1);
+	#else
 	init_MUTEX(&data->update_lock);
-
-	/* Tell the I2C layer a new client has arrived */
-	err = i2c_attach_client(new_client);
-	if (err)
-		goto error;
+	#endif
 
 	/* Register sysfs files */
-	device_create_file(&new_client->dev, &dev_attr_temp_max);
-	device_create_file(&new_client->dev, &dev_attr_temp_min);
-	device_create_file(&new_client->dev, &dev_attr_temp_input);
+	device_create_file(&client->dev, &dev_attr_temp_max);
+	device_create_file(&client->dev, &dev_attr_temp_min);
+	device_create_file(&client->dev, &dev_attr_temp_input);
 
 	return 0;
 
 error:
-	kfree(new_client);
 	kfree(data);
 	return err;
 }
 
-static int chip_detach_client(struct i2c_client *client)
+static int chip_remove(struct i2c_client *client)
 {
 	struct chip_data *data = i2c_get_clientdata(client);
-	int err;
-
-	err = i2c_detach_client(client);
-	if (err) {
-		dev_err(&client->dev, "Client deregistration failed, client not detached.\n");
-		return err;
-	}
-
-	kfree(client);
+	
 	kfree(data);
 	return 0;
 }
