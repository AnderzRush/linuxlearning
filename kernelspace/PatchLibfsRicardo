--- ../../linlearn2/linuxlearning/kernelspace/libfs.c	2015-01-06 23:35:40.169438452 -0600
+++ libfs.c	2015-01-06 17:00:10.958063450 -0600
@@ -19,7 +19,7 @@
 #include <linux/fs.h>     	/* This is where libfs stuff is declared */
 #include <asm/atomic.h>
 #include <asm/uaccess.h>	/* copy_to_user */
-
+#include <linux/uidgid.h>
 /*
  * Boilerplate stuff.
  */
@@ -39,11 +39,15 @@
 static struct inode *lfs_make_inode(struct super_block *sb, int mode)
 {
 	struct inode *ret = new_inode(sb);
-
+	kuid_t uid;
+	kgid_t gid;
+	
 	if (ret) {
 		ret->i_mode = mode;
-		ret->i_uid = ret->i_gid = 0;
-		ret->i_blksize = PAGE_CACHE_SIZE;
+		uid.val = gid.val = 0;
+		ret->i_uid = uid;
+		ret->i_gid = gid;
+		ret->i_blkbits = PAGE_CACHE_SIZE;
 		ret->i_blocks = 0;
 		ret->i_atime = ret->i_mtime = ret->i_ctime = CURRENT_TIME;
 	}
@@ -61,7 +65,7 @@
  */
 static int lfs_open(struct inode *inode, struct file *filp)
 {
-	filp->private_data = inode->u.generic_ip;
+	filp->private_data = inode->i_private;
 	return 0;
 }
 
@@ -165,7 +169,7 @@
 	if (! inode)
 		goto out_dput;
 	inode->i_fop = &lfs_file_ops;
-	inode->u.generic_ip = counter;
+	inode->i_private = counter;
 /*
  * Put it all into the dentry cache and we're done.
  */
@@ -261,7 +265,6 @@
 static int lfs_fill_super (struct super_block *sb, void *data, int silent)
 {
 	struct inode *root;
-	struct dentry *root_dentry;
 /*
  * Basic parameters.
  */
@@ -276,43 +279,37 @@
  * directory.
  */
 	root = lfs_make_inode (sb, S_IFDIR | 0755);
-	if (! root)
-		goto out;
-	root->i_op = &simple_dir_inode_operations;
-	root->i_fop = &simple_dir_operations;
+	if (root){
+		root->i_op = &simple_dir_inode_operations;
+		root->i_fop = &simple_dir_operations;
+	}
 /*
  * Get a dentry to represent the directory in core.
  */
-	root_dentry = d_alloc_root(root);
-	if (! root_dentry)
-		goto out_iput;
-	sb->s_root = root_dentry;
+	sb->s_root = d_make_root(root);
+	if(!sb->s_root)
+		return -ENOMEM;
 /*
  * Make up the files which will be in this filesystem, and we're done.
  */
-	lfs_create_files (sb, root_dentry);
+	lfs_create_files (sb, sb->s_root);
 	return 0;
-
-  out_iput:
-	iput(root);
-  out:
-	return -ENOMEM;
 }
 
 
 /*
  * Stuff to pass in when registering the filesystem.
  */
-static struct super_block *lfs_get_super(struct file_system_type *fst,
+static struct dentry *lfs_get_super(struct file_system_type *fst,
 		int flags, const char *devname, void *data)
 {
-	return get_sb_single(fst, flags, data, lfs_fill_super);
+	return mount_single(fst, flags, data, lfs_fill_super);
 }
 
 static struct file_system_type lfs_type = {
 	.owner 		= THIS_MODULE,
 	.name		= "lwnfs",
-	.get_sb		= lfs_get_super,
+	.mount		= lfs_get_super,
 	.kill_sb	= kill_litter_super,
 };
 
